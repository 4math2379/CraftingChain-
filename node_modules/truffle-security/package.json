{
  "_from": "truffle-security@1.7.1",
  "_id": "truffle-security@1.7.1",
  "_inBundle": false,
  "_integrity": "sha512-oV4zK/hY60HA2o9oCJOi3KckfRhhzooJFf0GAD3t5fuzyNymC9ajrDqwB2dnZVAPdaNA+DCGYxqmH6j875Gxlw==",
  "_location": "/truffle-security",
  "_phantomChildren": {
    "chalk": "2.4.2",
    "cli-cursor": "2.1.0",
    "cli-width": "2.2.0",
    "command-exists": "1.2.8",
    "escape-string-regexp": "1.0.5",
    "figures": "2.0.0",
    "glob": "7.1.2",
    "graceful-fs": "4.1.11",
    "has-flag": "3.0.0",
    "he": "1.1.1",
    "klaw": "1.3.1",
    "memorystream": "0.3.1",
    "minimatch": "3.0.4",
    "mute-stream": "0.0.7",
    "path-is-absolute": "1.0.1",
    "require-from-string": "2.0.2",
    "rimraf": "2.7.1",
    "run-async": "2.3.0",
    "rxjs": "6.5.5",
    "safer-buffer": "2.1.2",
    "semver": "5.5.1",
    "string-width": "2.1.1",
    "through": "2.3.8",
    "tmp": "0.0.33"
  },
  "_requested": {
    "escapedName": "truffle-security",
    "fetchSpec": "1.7.1",
    "name": "truffle-security",
    "raw": "truffle-security@1.7.1",
    "rawSpec": "1.7.1",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/truffle-security/-/truffle-security-1.7.1.tgz",
  "_shasum": "612969c5df68f29307778b338a944f96adc32036",
  "_shrinkwrap": null,
  "_spec": "truffle-security@1.7.1",
  "_where": "C:\\Users\\Rahma John\\Documents\\dev\\CraftingChain-",
  "author": {
    "name": "consensys.net"
  },
  "authors": [
    {
      "name": "Rocky Bernstein",
      "email": "rocky.bernstein@consensys.net"
    },
    {
      "name": "Daniyar Chambylov",
      "email": "dan.chambylov@gmail.com"
    }
  ],
  "bugs": {
    "url": "https://github.com/ConsenSys/truffle-security/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@truffle/artifactor": "^4.0.36",
    "@truffle/compile-vyper": "^1.0.33",
    "@truffle/config": "^1.2.6",
    "@truffle/contract": "^4.0.37",
    "@truffle/contract-sources": "^0.1.6",
    "@truffle/error": "0.0.7",
    "@truffle/expect": "0.0.12",
    "@truffle/external-compile": "^1.0.19",
    "@truffle/resolver": "^5.0.18",
    "armlet": "^2.7.0",
    "configstore": "^4.0.0",
    "debug": "^4.1.1",
    "eslint": "^5.16.0",
    "find-cache-dir": "^2.1.0",
    "inquirer": "^6.2.2",
    "js-yaml": "^3.13.1",
    "lodash": "^4.17.15",
    "mkdirp": "^0.5.1",
    "mocha": "^5.2.0",
    "multi-progress": "^2.0.0",
    "mythxjs": "^1.3.11",
    "proxyquire": "^2.1.0",
    "remix-lib": ">=0.4.1",
    "sleep": "6.1.0",
    "solc": "^0.5.8",
    "tiny-async-pool": "^1.0.4",
    "uuid": "^3.3.3"
  },
  "deprecated": false,
  "description": "MythX security analysis plugin for the Truffle Framework",
  "devDependencies": {
    "babel-eslint": "^10.0.1",
    "coveralls": "^3.0.2",
    "esdoc": "^1.1.0",
    "esdoc-ecmascript-proposal-plugin": "^1.0.0",
    "esdoc-node": "^1.0.4",
    "esdoc-standard-plugin": "^1.0.0",
    "husky": "^3.0.5",
    "ipfsd-ctl": "^0.47.4",
    "lint-staged": "^9.2.5",
    "node-fetch": "^2.3.0",
    "nyc": "^14.1.0",
    "rewire": "^4.0.1",
    "sinon": "^7.2.2",
    "truffle-blockchain-utils": "^0.0.5"
  },
  "engines": {
    "node": ">=8.10.0"
  },
  "homepage": "https://github.com/consensys/truffle-security",
  "husky": {
    "hooks": {
      "pre-commit": "npm run test && lint-staged"
    }
  },
  "keywords": [
    "ethereum",
    "mythX",
    "mythril",
    "truffle"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "git add"
    ]
  },
  "main": "index.js",
  "name": "truffle-security",
  "namespace": "consensys",
  "nyc": {
    "exclude": [
      "compat/**/*.js",
      "test/**/*.js"
    ]
  },
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "[![CircleCI](https://circleci.com/gh/ConsenSys/truffle-security.svg?style=svg)](https://circleci.com/gh/ConsenSys/truffle-security)\n[![Coverage Status](https://coveralls.io/repos/github/ConsenSys/truffle-security/badge.svg?branch=master)](https://coveralls.io/github/ConsenSys/truffle-security?branch=master)\n[![ESDoc](https://doc.esdoc.org/github.com/ConsenSys/truffle-security/badge.svg)](https://doc.esdoc.org/github.com/ConsenSys/truffle-security)\n\n# MythX Security Analysis Plugin for Truffle Framework\n\nThis plugin adds automated smart contract security analysis to the [Truffle framework](https://truffleframework.com/docs/truffle/overview). It is based on [MythX](https://mythx.io), the security analysis API for Ethereum smart contracts. The plugin is compatible with Truffle 5.0 or higher.\n\n## Installing the Plugin\n\nTo install the latest stable version from NPM:\n\n```console\n$ npm install -g truffle-security\n```\n\n### Windows only\nOn Windows `node-gyp` dependency requires `windows-build-tools` to be installed from an elevated PowerShell or CMD.exe (run as Administrator).\n```console\nnpm install --global --production windows-build-tools\n```\nFor more details refer to [node-gyp installation guide](https://github.com/nodejs/node-gyp#option-1).\n\n## Configuration\n\nCurrently, the plugin must be activated on a per-project basis. If `truffle-security` was installed to the Truffle project root, it will try to automatically install itself to `truffle-config.js`. If you installed `truffle-security` globally, add the following to `truffle-config.js` in the root directory of your Truffle project to enable the plugin:\n\n```javascript\nmodule.exports = {\n    plugins: [ \"truffle-security\" ]\n};\n```\n\n### MythX Account\n\nYou can set up a free account on the [MythX website](https://mythx.io) to get full access. Generate your API key in the tools section of the [MythX dashboard](https://dashboard.mythx.io/#/). \n\nThe key can be passed to Truffle either via the `MYTHX_API_KEY` environment variable or the `--apiKey` command line argument. For security reasons it is recommended to always pass the token through an environment variable, e.g. defined in the settings of a Continuous Integration (CI) server or a shell script that can be sourced from.\n\nSet the following enviromment variables to your API key (add this to your `.bashrc` or `.bash_profile` for added convenience):\n\n```bash\nexport MYTHX_API_KEY='Put your API key here!'\n```\n\nAnd if you're using Windows OS with PowerShell:\n\n```bash\n$env:MYTHX_API_KEY='Put your API key here!'\n```\n\n### Solc Version\n\nYou can specify which version of solc to use in `truffle-config.js` as explained in [truffle's documentation](https://truffleframework.com/docs/truffle/reference/configuration#solc). MythX for Truffle will use the same version of solc that Truffle uses to compile and analyze your contracts.\n\n```\nmodule.exports = {\n  plugins: [ \"truffle-security\" ],\n  networks: {\n    ... etc ...\n  },\n  compilers: {\n     solc: {\n       version: <string>  // ex:  \"0.4.20\". (Default: Truffle's installed solc)\n     }\n  }\n};\n```\n\n## Running Security Analyses\n\nOnce the plugin is installed the `truffle run verify` becomes available. You can either analyze a specific file by running `truffle run verify <file-name>`, a contract by running `truffle run verify <file-name>:<contract-name>`, or the entire project with simply `truffle run verify`.\n\nAlternatively you can use `truffle run mythx` instead of `truffle run verify`.\n\n**Your project must compile successfully for the security analysis to work.** Note that the `verify` command invokes `truffle compile` automatically if the build files are not up to date.\n\nHere is the output of `truffle verify` for an [example](https://github.com/ConsenSys/mythx-playground/tree/master/exercise2) from the [DevCon4 MythX Workshop](https://github.com/ConsenSys/mythx-workshop):\n\n```console\n$ truffle run verify\n\n/Projects/mythx-playground/exercise2/contracts/Tokensale.sol\n   1:0   warning  A floating pragma is set                SWC-103\n  16:29  warning  The binary multiplication can overflow  SWC-101\n  18:8   warning  The binary addition can overflow        SWC-101\n\n✖ 4 problems (0 errors, 4 warnings)\n```\n\nHere is an example of analyzing the same contract passing it in directly and using the `table` report style:\n\n```\n$ truffle run verify contracts/Tokensale.sol:Tokensale --style table\n\n/Projects/mythx-playground/exercise2/contracts/Tokensale.sol\n\n║ Line     │ Column   │ Type     │ Message                                                │ Rule ID              ║\n╟──────────┼──────────┼──────────┼────────────────────────────────────────────────────────┼──────────────────────╢\n║ 1        │ 0        │ warning  │ A floating pragma is set.                              │ SWC-103              ║\n║ 16       │ 29       │ warning  │ The binary multiplication can overflow.                │ SWC-101              ║\n║ 18       │ 8        │ warning  │ The binary addition can overflow.                      │ SWC-101              ║\n\n╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\n║ 0 Errors                                                                                                       ║\n╟────────────────────────────────────────────────────────────────────────────────────────────────────────────────╢\n║ 4 Warnings                                                                                                     ║\n╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝\n\n```\n\n## Advanced Options\n\nRun `truffle run verify --help` to show advanced configuration options.\n\n```console\n$ truffle run verify --help\n\nUsage: truffle run verify [options] [solidity-file[:contract-name] [solidity-file[:contract-name] ...]]\n\nRuns MythX analyses on given Solidity contracts. If no contracts are\ngiven, all are analyzed.\n\nOptions:\n  --all      Compile all contracts instead of only the contracts changed since last compile.\n  --apiClient { mythxjs | armlet}\n            Which api client to use. Default and recommended is mythxjs.\n  --mode { quick | standard | deep}\n             Perform quick, in-depth (standard) or deep analysis. Default = quick.\n  --style { stylish | json | table | tap | unix | markdown | ... },\n             Output report in the given es-lint style style.\n             See https://eslint.org/docs/user-guide/formatters/ for a full list.\n             The markdown format is also included.\n  --json | --yaml\n             Dump results in unprocessed JSON or YAML format as it comes back from MythX.\n             Note: this disables providing any es-lint style reports, and that\n             --style=json is processed for eslint, while --json is not.\n  --timeout *secs*\n             Limit MythX analyses time to *secs* seconds.\n             The default is 300 seconds (five minutes).\n  --initial-delay *secs*\n             Minimum amount of time to wait before attempting a first status poll to MythX.\n             The default is 45 seconds.\n             See https://github.com/ConsenSys/armlet#improving-polling-response\n  --limit *N*\n             Have no more than *N* analysis requests pending at a time.\n             As results come back, remaining contracts are submitted.\n             The default is 4 contracts, the maximum value, but you can\n             set this lower.\n  --debug    Provide additional debug output. Use --debug=2 for more\n             verbose output\n  --min-severity { warning | error }\n             Ignore SWCs below the designated level\n  --swc-blacklist { 101 | 103,111,115 | ... }\n             Ignore a specific SWC or list of SWCs.\n  --uuid *UUID*\n             Print in YAML results from a prior run having *UUID*\n             Note: this is still a bit raw and will be improved.\n  --version  Show package and MythX version information.\n  --progress, --no-progress\n             Enable/disable progress bars during analysis. The default is enabled.\n  --mythx-logs --no-mythx-logs\n             Enable/disable  MythX logs.\n  --ci\n             Blocking non zero return for CI integrations to throw an error (non-zero exit code).\n  --ci-whitelist { 101 | 103,111,115 | ... }\n             List of allowed SWCs that will not throw an error (non-zero exit code).\n  --apiKey { api key generated from profile dashboard}\n             Authenticate with api key instead of login details.\n  --color, --no-color\n             Enable/disable output coloring. The default is enabled.\n\n\n```\nConfiguration options can also be stored as json in `truffle-security.json` at the truffle project root. i.e. : \n```\n{\n    \"style\": \"table\",\n    \"mode\": \"quick\",\n    \"min-severity\": \"warning\",\n    \"swc-blacklist\": [103,111]\n}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/consensys/truffle-security.git"
  },
  "scripts": {
    "coverage": "nyc report --reporter=text-lcov | coveralls",
    "esdoc": "esdoc",
    "esdoc-create": "node ./commands/update-docs.js",
    "postinstall": "node ./scripts/install-to-truffle.js",
    "test": "nyc mocha"
  },
  "version": "1.7.1"
}
