{
  "_from": "github@13.1.1",
  "_id": "github@13.1.1",
  "_inBundle": false,
  "_integrity": "sha512-BpItPaOCuvotnNUGXSSEDkB86eqQ7+k7j8/+lu5gbRmNnFPW/uQyFezH1fjy7XojieVNzD/+MgPhBngaw+Ocfw==",
  "_location": "/github",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "github",
    "fetchSpec": "13.1.1",
    "name": "github",
    "raw": "github@13.1.1",
    "rawSpec": "13.1.1",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/github/-/github-13.1.1.tgz",
  "_shasum": "e4775be32c3a72e44d5cbec965dbeb8c0aac7c1f",
  "_shrinkwrap": null,
  "_spec": "github@13.1.1",
  "_where": "/Users/rahma/Documents/GitHub/CraftingChain-",
  "apidoc": {
    "template": {
      "withCompare": false
    }
  },
  "author": {
    "email": "info@mikedeboer.nl",
    "name": "Mike de Boer"
  },
  "bugs": {
    "url": "https://github.com/octokit/node-github/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Mike de Boer",
      "email": "info@mikedeboer.nl"
    },
    {
      "name": "Fabian Jakobs",
      "email": "fabian@c9.io"
    },
    {
      "name": "Joe Gallo",
      "email": "joe@brassafrax.com"
    },
    {
      "name": "Gregor Martynus",
      "url": "https://github.com/gr2m"
    }
  ],
  "dependencies": {
    "debug": "^3.1.0",
    "dotenv": "^4.0.0",
    "https-proxy-agent": "^2.1.0",
    "is-stream": "^1.1.0",
    "lodash": "^4.17.4",
    "proxy-from-env": "^1.0.0",
    "url-template": "^2.0.8"
  },
  "deprecated": "'github' has been renamed to '@octokit/rest' (https://git.io/vNB11)",
  "description": "GitHub REST API client for Node.js",
  "devDependencies": {
    "@octokit/fixtures": "^5.4.0",
    "apidoc": "^0.17.6",
    "chai": "^4.1.2",
    "coveralls": "^3.0.0",
    "gh-pages-with-token": "^1.0.0",
    "glob": "^7.1.2",
    "mkdirp": "^0.5.1",
    "mocha": "^4.0.1",
    "mustache": "^2.2.1",
    "nock": "^9.1.0",
    "npm-run-all": "^4.1.1",
    "nyc": "^11.2.1",
    "proxyquire": "^1.8.0",
    "semantic-release": "^11.0.0",
    "simple-mock": "^0.8.0",
    "standard": "^10.0.3",
    "standard-markdown": "^4.0.2"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/octokit/node-github#readme",
  "license": "MIT",
  "licenses": [
    {
      "type": "The MIT License",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "main": "lib",
  "name": "github",
  "nyc": {
    "ignore": [
      "examples",
      "test"
    ]
  },
  "optionalDependencies": {},
  "publishConfig": {
    "tag": "next"
  },
  "readme": "# node-github\n\n> GitHub REST API client for Node.js\n\n[![Build Status](https://travis-ci.org/octokit/node-github.svg?branch=master)](https://travis-ci.org/octokit/node-github)\n[![Coverage Status](https://coveralls.io/repos/github/octokit/node-github/badge.svg)](https://coveralls.io/github/octokit/node-github)\n[![Greenkeeper](https://badges.greenkeeper.io/octokit/node-github.svg)](https://greenkeeper.io/)\n[![npm](https://img.shields.io/npm/v/github.svg)](https://www.npmjs.com/package/github)\n\n## Installation\n\nInstall via npm.\n\n```bash\nnpm install github\n```\n\nor install via git clone:\n\n```bash\ngit clone https://github.com/octokit/node-github\ncd node-github\nnpm install\n```\n\n## Documentation\n\nClient API: [octokit.github.io/node-github](https://octokit.github.io/node-github/)\nGitHub API: [developer.github.com/v3](https://developer.github.com/v3/)\n\n## Example\n\nGet all followers for user \"defunkt\":\n\n<!-- HEADS UP: when changing the options for the constructor, make sure to also\n     update the type definition templates in scripts/templates/* -->\n```js\nvar GitHubApi = require('github')\n\nvar github = new GitHubApi({\n    // optional\n  timeout: 5000,\n  host: 'github.my-GHE-enabled-company.com', // should be api.github.com for GitHub\n  pathPrefix: '/api/v3', // for some GHEs; none for GitHub\n  protocol: 'https',\n  port: 9898,\n  proxy: '<proxyUrl>',\n  ca: 'whatever',\n  headers: {\n    'accept': 'application/vnd.github.something-custom',\n    'cookie': 'something custom',\n    'user-agent': 'something custom'\n  },\n  requestMedia: 'application/vnd.github.something-custom',\n  rejectUnauthorized: false, // default: true\n  family: 6\n})\n\n// TODO: optional authentication here depending on desired endpoints. See below in README.\n\ngithub.users.getFollowingForUser({\n    // optional\n    // headers: {\n    //     \"cookie\": \"blahblah\"\n    // },\n  username: 'defunkt'\n}, function (err, res) {\n  if (err) throw err\n  console.log(JSON.stringify(res))\n})\n```\n\n## Pagination\n\nThere are a few pagination-related methods:\n\n```\nhasNextPage(link)\nhasPreviousPage(link)\nhasFirstPage(link)\nhasLastPage(link)\n\ngetNextPage(link, headers, callback)\ngetPreviousPage(link, headers, callback)\ngetFirstPage(link, headers, callback)\ngetLastPage(link, headers, callback)\n\nNOTE: link is the response object or the contents of the Link header\n```\n\nSee [here](https://github.com/octokit/node-github/blob/master/examples/paginationCustomHeaders.js) and [here](https://github.com/octokit/node-github/blob/master/examples/getStarred.js) for examples.\n\n## Authentication\n\nMost GitHub API calls don't require authentication. As a rule of thumb: If you can see the information by visiting the site without being logged in, you don't have to be authenticated to retrieve the same information through the API. Of course calls, which change data or read sensitive information have to be authenticated.\n\nYou need the GitHub user name and the API key for authentication. The API key can be found in the user's _Account Settings_.\n\n```javascript\n// basic\ngithub.authenticate({\n  type: 'basic',\n  username: process.env.USERNAME,\n  password: process.env.PASSWORD\n})\n\n// oauth\ngithub.authenticate({\n  type: 'oauth',\n  token: process.env.AUTH_TOKEN\n})\n\n// oauth key/secret (to get a token)\ngithub.authenticate({\n  type: 'oauth',\n  key: process.env.CLIENT_ID,\n  secret: process.env.CLIENT_SECRET\n})\n\n// user token\ngithub.authenticate({\n  type: 'token',\n  token: 'userToken'\n})\n\n// integration (jwt)\ngithub.authenticate({\n  type: 'integration',\n  token: 'jwt'\n})\n```\n\nNote: `authenticate` is synchronous because it only stores the\ncredentials for the next request.\n\n### Creating a token for your application\n[Create a new authorization](https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization).\n\n1. Use github.authenticate() to authenticate with GitHub using your username / password.\n2. Create an application token programmatically with the scopes you need and, if you use two-factor authentication send the `X-GitHub-OTP` header with the one-time-password you get on your token device.\n\n```javascript\ngithub.authorization.create({\n  scopes: ['user', 'public_repo', 'repo', 'repo:status', 'gist'],\n  note: 'what this auth is for',\n  note_url: 'http://url-to-this-auth-app',\n  headers: {\n    'X-GitHub-OTP': 'two-factor-code'\n  }\n}, function (err, res) {\n  if (err) throw err\n  if (res.token) {\n    // save and use res.token as in the Oauth process above from now on\n  }\n})\n```\n\n## DEBUG\n\nSet `DEBUG=node-github*` for additional debug logs.\n\n## Tests\n\nRun all tests\n\n```bash\n$ npm test\n```\n\nOr run a specific test\n\n```bash\n$ ./node_modules/.bin/mocha test/test/integration/get-repository-test.js\n```\n\nThe examples are run as part of the tests. You can set an `EXAMPLES_GITHUB_TOKEN` environment\nvariable (or set it in a `.env` file) to avoid running against GitHub's rate limit.\n\n## Preview APIs\n\nAccept headers for the preview APIs should be taken care of behind the scenes, but in the event a preview endpoint isn't working, see [here](https://github.com/octokit/node-github/blob/master/examples/getRawBlob.js) for an example on how to add the required custom accept header.\n\nFor updates on endpoints under preview, see https://developer.github.com/changes/.\n\n| Preview API             | Accept header val                                     |\n| -------------------     | -----------------------------------------------       |\n| Blocking Users          | application/vnd.github.giant-sentry-fist-preview+json |\n| Codes of Conduct        | application/vnd.github.scarlet-witch-preview+json     |\n| Commit Search           | application/vnd.github.cloak-preview+json             |\n| Community               | application/vnd.github.black-panther-preview+json     |\n| Deployment              | application/vnd.github.ant-man-preview+json           |\n| Git signing             | application/vnd.github.cryptographer-preview          |\n| Imports                 | application/vnd.github.barred-rock-preview            |\n| Integrations            | application/vnd.github.machine-man-preview            |\n| License                 | application/vnd.github.drax-preview+json              |\n| Marketplace             | application/vnd.github.valkyrie-preview+json          |\n| Migrations              | application/vnd.github.wyandotte-preview+json         |\n| Nested Teams            | application/vnd.github.hellcat-preview+json           |\n| Pages                   | application/vnd.github.mister-fantastic-preview       |\n| Pre-receive             | application/vnd.github.eye-scream-preview             |\n| Projects                | application/vnd.github.inertia-preview+json           |\n| Pull Request Squash     | application/vnd.github.polaris-preview                |\n| Reactions               | application/vnd.github.squirrel-girl-preview          |\n| Review Requests         | application/vnd.github.thor-preview+json              |\n| Star Creation Timestamp | application/vnd.github.v3.star+json                   |\n| Timeline                | application/vnd.github.mockingbird-preview            |\n| Topics                  | application/vnd.github.mercy-preview+json             |\n\n## LICENSE\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/octokit/node-github.git"
  },
  "scripts": {
    "build": "npm-run-all build:*",
    "build:docs": "node scripts/generate-api-docs",
    "build:flow": "node scripts/generate-flow-types",
    "build:ts": "node scripts/generate-typescript-types",
    "coverage": "nyc report --reporter=html && open coverage/index.html",
    "coverage:upload": "nyc report --reporter=text-lcov | coveralls",
    "deploy-docs": "gh-pages-with-token -d apidoc",
    "postbuild:docs": "apidoc -i doc/ -o apidoc/",
    "postpublish": "npm run -s deploy-docs",
    "prebuild:docs": "mkdirp doc/",
    "presemantic-release": "npm run -s build",
    "pretest": "standard && standard-markdown",
    "semantic-release": "semantic-release",
    "test": "nyc mocha 'test/**/*-test.js'",
    "test:examples": "node test/examples.js"
  },
  "types": "lib/index.d.ts",
  "version": "13.1.1"
}
