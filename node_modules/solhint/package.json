{
  "_from": "solhint",
  "_id": "solhint@1.2.1",
  "_inBundle": false,
  "_integrity": "sha512-3B0ydhkOlicyyTmKnwJC6kiwdJUXvbbDYXcy8m7rznoQPgzzkmSOsJgb9BAe+KBQP5BD3PLgcoOQ84t3FSxqsQ==",
  "_location": "/solhint",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "solhint",
    "fetchSpec": "latest",
    "name": "solhint",
    "raw": "solhint",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/solhint/-/solhint-1.2.1.tgz",
  "_shasum": "59a1416cef94da38d587f768a73536d6e3403dd3",
  "_shrinkwrap": null,
  "_spec": "solhint",
  "_where": "/Users/rahma/Documents/GitHub/CraftingChain-",
  "author": {
    "email": "ilya.drobenya@gmail.com",
    "name": "Ilya Drabenia"
  },
  "bin": {
    "solhint": "solhint.js"
  },
  "bugs": {
    "url": "https://github.com/protofire/solhint/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "antlr4": "4.7.0",
    "commander": "2.11.0",
    "eslint": "^4.19.1",
    "glob": "7.1.2",
    "ignore": "^3.3.7",
    "lodash": "^4.17.10"
  },
  "deprecated": false,
  "description": "Solidity Code Linter",
  "devDependencies": {
    "assert": "1.4.1",
    "coveralls": "^3.0.1",
    "mocha": "^5.1.1",
    "mocha-lcov-reporter": "1.3.0",
    "nyc": "^11.8.0"
  },
  "homepage": "https://protofire.github.io/solhint/",
  "keywords": [
    "ast",
    "code-quality",
    "developer-tools",
    "ethereum",
    "linter",
    "security-scanner",
    "smart-contracts",
    "solidity"
  ],
  "license": "MIT",
  "main": "solhint.js",
  "name": "solhint",
  "optionalDependencies": {},
  "readme": "## Solhint Project\n\n[![Build Status](https://travis-ci.org/protofire/solhint.svg?branch=master)](https://travis-ci.org/protofire/solhint)\n[![npm version](http://img.shields.io/npm/v/solhint.svg?style=flat)](https://npmjs.org/package/solhint\n\"Solhint on npmjs.com\")\n[![Coverage Status](https://coveralls.io/repos/github/protofire/solhint/badge.svg?branch=master)](\nhttps://coveralls.io/github/protofire/solhint?branch=master)\n[![dependencies Status](https://david-dm.org/protofire/solhint/status.svg)](https://david-dm.org/protofire/solhint)\n[![devDependencies Status](https://david-dm.org/protofire/solhint/dev-status.svg)](https://david-dm.org/protofire/solhint?type=dev)\n\nThis is an open source project for linting [Solidity](http://solidity.readthedocs.io/en/develop/) code. This project\nprovides both **Security** and **Style Guide** validations.\n\n### Installation\n\nYou can install Solhint using **npm**:\n\n```sh\nnpm install -g solhint\n\n# verify that it was installed correctly\nsolhint -V\n```\n\n### Usage\n\nFor linting Solidity files you need to run Solhint with one or more [Globs](https://en.wikipedia.org/wiki/Glob_(programming)) as arguments. For example, to lint all files inside `contracts` directory, you can do:\n\n```sh\nsolhint \"contracts/**/*.sol\"\n```\n\nTo lint a single file:\n\n```sh\nsolhint contracts/MyToken.sol\n```\n\nSolhint command description:\n\n```text\nUsage: solhint [options] <file> [...other_files]\n\nLinter for Solidity programming language\n\n\nOptions:\n\n  -V, --version           output the version number\n  -f, --formatter [name]  report formatter name (stylish, table, tap, unix)\n  -h, --help              output usage information\n\n\nCommands:\n\n  stdin [options]         put source code to stdin of this utility\n  init-config             create sample solhint config in current folder\n```\n\n### Configuration\n\nYou can use a `.solhint.json` file to configure Solhint globally. This file has the following\nformat:\n\n```json\n  {\n    \"extends\": \"default\",\n    \"rules\": {\n      \"avoid-throw\": false,\n      \"avoid-suicide\": \"error\",\n      \"avoid-sha3\": \"warn\",\n      \"indent\": [\"warn\", 4]\n    }\n  }\n```\n\nTo ignore files / folders that do not require validation you may use `.solhintignore` file. It supports rules in \n`.gitignore` format.\n\n```git exclude\nnode_modules/\nadditiona-tests.sol\n```\n\n### Configure linter with comments\n\nYou can use comments in the source code to configure solhint in a given line or file.\n\nFor example, to disable all validations in the line following a comment:\n\n```javascript\n  // solhint-disable-next-line\n  uint[] a;\n```\n\nYou can disable a single rule on a given line. For example, to disable validation of fixed compiler\nversion in the next line:\n\n```text\n  // solhint-disable-next-line compiler-fixed, compiler-gt-0_4\n  pragma solidity ^0.4.4;\n```\n\nDisable validation on current line:\n\n```text\n  pragma solidity ^0.4.4; // solhint-disable-line\n```\n\nDisable validation of fixed compiler version validation on current line:\n\n```text\n  pragma solidity ^0.4.4; // solhint-disable-line compiler-fixed, compiler-gt-0_4\n```\n\nYou can disable a rule for a group of lines:\n\n```javascript\n  /* solhint-disable avoid-throw */\n  if (a > 1) {\n    throw;\n  }\n  /* solhint-enable avoid-throw */\n```\n\nOr disable all validations for a group of lines:\n\n```javascript\n  /* solhint-disable */\n  if (a > 1) {\n    throw;\n  }\n  /* solhint-enable */\n```\n\n### Security Rules\n\n | Rule ID                       |                      Error                                        |\n |-------------------------------|-------------------------------------------------------------------|\n | **reentrancy**                | Possible reentrancy vulnerabilities. Avoid state changes after transfer. |\n | **avoid-sha3**                | Use \"keccak256\" instead of deprecated \"sha3\"                      |\n | **avoid-suicide**             | Use \"selfdestruct\" instead of deprecated \"suicide\"                |\n | **avoid-throw**               | \"throw\" is deprecated, avoid to use it                            |\n | **func-visibility**           | Explicitly mark visibility in function                            |\n | **state-visibility**          | Explicitly mark visibility of state                               |\n | **check-send-result**         | Check result of \"send\" call                                       |\n | **avoid-call-value**          | Avoid to use \".call.value()()\"                                    |\n | **compiler-fixed**            | Compiler version must be fixed                                    |\n | **compiler-gt-0_4**           | Use at least '0.4' compiler version                               |\n | **no-complex-fallback**       | Fallback function must be simple                                  |\n | **mark-callable-contracts**   | Explicitly mark all external contracts as trusted or untrusted    |\n | **multiple-sends**            | Avoid multiple calls of \"send\" method in single transaction       |\n | **no-simple-event-func-name** | Event and function names must be different                        |\n | **avoid-tx-origin**           | Avoid to use tx.origin                                            |\n | **no-inline-assembly**        | Avoid to use inline assembly. It is acceptable only in rare cases |\n | **not-rely-on-block-hash**    | Do not rely on \"block.blockhash\". Miners can influence its value. |\n | **avoid-low-level-calls**     | Avoid to use low level calls.                                     |\n\n\\* \\- All security rules implemented according [ConsenSys Guide for Smart Contracts](\nhttps://consensys.github.io/smart-contract-best-practices/recommendations/)\n\n### Style Guide Rules\n \n | Rule ID                       |                      Error                                                |\n |-------------------------------|---------------------------------------------------------------------------|\n | **func-name-mixedcase**       | Function name must be in camelCase                                        |\n | **func-param-name-mixedcase** | Function param name must be in mixedCase                                  |\n | **var-name-mixedcase**        | Variable name must be in mixedCase                                        |\n | **event-name-camelcase**      | Event name must be in CamelCase                                           |\n | **const-name-snakecase**      | Constant name must be in capitalized SNAKE_CASE                           |\n | **modifier-name-mixedcase**   | Modifier name must be in mixedCase                                        |\n | **contract-name-camelcase**   | Contract name must be in CamelCase                                        |\n | **use-forbidden-name**        | Avoid to use letters 'I', 'l', 'O' as identifiers                         |\n | **visibility-modifier-order** | Visibility modifier must be first in list of modifiers                    |\n | **imports-on-top**            | Import statements must be on top                                          |\n | **two-lines-top-level-separator** | Definition must be surrounded with two blank line indent              |\n | **func-order**                | Function order is incorrect                                               |\n | **quotes**                    | Use double quotes for string literals                                     |\n | **no-mix-tabs-and-spaces**    | Mixed tabs and spaces                                                     |\n | **indent**                    | Indentation is incorrect                                                  |\n | **bracket-align**             | Open bracket must be on same line. It must be indented by other constructions by space |\n | **array-declaration-spaces**  | Array declaration must not contains spaces                                |\n | **separate-by-one-line-in-contract** | Definitions inside contract / library must be separated by one line|\n | **expression-indent**         | Expression indentation is incorrect.                                      |\n | **statement-indent**          | Statement indentation is incorrect.                                       |\n | **space-after-comma**         | Comma must be separated from next element by space                        |\n | **no-spaces-before-semicolon**| Semicolon must not have spaces before                                     |\n \n\\* \\- All style guide rules implemented according [Solidity Style Guide](\nhttp://solidity.readthedocs.io/en/develop/style-guide.html)\n \n### Best Practise Rules\n \n  | Rule ID                       |                      Error                                                       |\n  |-------------------------------|----------------------------------------------------------------------------------|\n  | **max-line-length**           | Line length must be no more than 120 but current length is 121.                  |\n  | **payable-fallback**          | When fallback is not payable you will not be able to receive ethers              |\n  | **no-empty-blocks**           | Code contains empty block                                                        |\n  | **no-unused-vars**            | Variable \"name\" is unused                                                        |\n  | **function-max-lines**        | Function body contains \"count\" lines but allowed no more than \"maxLines\" lines   |\n  | **code-complexity**           | Function has cyclomatic complexity \"current\" but allowed no more than \"max\"      |\n  | **max-states-count**          | Contract has \"curCount\" states declarations but allowed no more than \"max\"       |\n \n### Documentation\n\nRelated documentation you may find [there](https://protofire.github.io/solhint/).\n\n### IDE Integrations\n\n  - **[Sublime Text 3](https://packagecontrol.io/search/solhint)**\n  - **[Atom](https://atom.io/packages/atom-solidity-linter)**\n  - **[Vim](https://github.com/sohkai/syntastic-local-solhint)**\n  - **[JetBrains IDEA, WebStorm, CLion, etc.](https://plugins.jetbrains.com/plugin/10177-solidity-solhint)**\n  - **[VS Code: Solidity by Juan Blanco](\n         https://marketplace.visualstudio.com/items?itemName=JuanBlanco.solidity)**\n  - **[VS Code: Solidity Language Support by CodeChain.io](\n         https://marketplace.visualstudio.com/items?itemName=kodebox.solidity-language-server)**\n\n### Licence\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/protofire/solhint.git"
  },
  "scripts": {
    "exec-tests": "nyc -x \"**/grammar/**\" mocha && nyc report --reporter=text-lcov | coveralls",
    "generate": "(cd ./solidity-antlr4; java org.antlr.v4.Tool ./Solidity.g4 -Dlanguage=JavaScript -o ../lib/grammar)",
    "test": "eslint *.js lib/*.js lib/rules/*.js lib/rules/**/*.js test/*.js && npm run exec-tests",
    "test-only": "mocha"
  },
  "version": "1.2.1"
}
