{
  "_from": "solhint@1.5.1",
  "_id": "solhint@1.5.1",
  "_inBundle": false,
  "_integrity": "sha512-ZweXCnsSEntIFcY7QYwdqnU9THuJQRt8XLxg3hNJPePGIg+VcucYr2KZZE/mDVy4ZDzhZ0zpW3tWAnc5ZgXWCA==",
  "_location": "/solhint",
  "_phantomChildren": {
    "fs.realpath": "1.0.0",
    "inflight": "1.0.6",
    "inherits": "2.0.3",
    "minimatch": "3.0.4",
    "once": "1.4.0",
    "path-is-absolute": "1.0.1"
  },
  "_requested": {
    "escapedName": "solhint",
    "fetchSpec": "1.5.1",
    "name": "solhint",
    "raw": "solhint@1.5.1",
    "rawSpec": "1.5.1",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/solhint/-/solhint-1.5.1.tgz",
  "_shasum": "a8feca7e2d174c2b7276ca0f68b496c3fb306ced",
  "_shrinkwrap": null,
  "_spec": "solhint@1.5.1",
  "_where": "C:\\Users\\Rahma John\\Documents\\dev\\CraftingChain-",
  "author": {
    "email": "ilya.drobenya@gmail.com",
    "name": "Ilya Drabenia"
  },
  "bin": {
    "solhint": "solhint.js"
  },
  "bugs": {
    "url": "https://github.com/protofire/solhint/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "antlr4": "4.7.1",
    "commander": "2.18.0",
    "eslint": "^5.6.0",
    "fast-diff": "^1.1.2",
    "glob": "7.1.3",
    "ignore": "^4.0.6",
    "lodash": "^4.17.11",
    "prettier": "^1.14.3",
    "prettier-linter-helpers": "^1.0.0",
    "prettier-plugin-solidity": "^1.0.0-alpha.4"
  },
  "deprecated": false,
  "description": "Solidity Code Linter",
  "devDependencies": {
    "assert": "1.4.1",
    "coveralls": "^3.0.2",
    "eslint-config-airbnb-base": "^13.1.0",
    "eslint-config-prettier": "^3.1.0",
    "eslint-plugin-import": "^2.14.0",
    "eslint-plugin-prettier": "^2.6.2",
    "mocha": "^5.2.0",
    "mocha-lcov-reporter": "1.3.0",
    "nyc": "^13.0.1"
  },
  "homepage": "https://protofire.github.io/solhint/",
  "keywords": [
    "ast",
    "code-quality",
    "developer-tools",
    "ethereum",
    "linter",
    "security-scanner",
    "smart-contracts",
    "solidity"
  ],
  "license": "MIT",
  "main": "solhint.js",
  "name": "solhint",
  "optionalDependencies": {
    "prettier": "^1.14.3",
    "prettier-plugin-solidity": "^1.0.0-alpha.4"
  },
  "readme": "# Solhint Project\n[![Donate with Ethereum](https://en.cryptobadges.io/badge/micro/0xe8cdf02efd8ab0a490d7b2cb13553389c9bc932e)](https://en.cryptobadges.io/donate/0xe8cdf02efd8ab0a490d7b2cb13553389c9bc932e)\n\n[![Gitter chat](https://badges.gitter.im/gitterHQ/gitter.svg)](https://gitter.im/solhint/Lobby)\n[![Build Status](https://travis-ci.org/protofire/solhint.svg?branch=master)](https://travis-ci.org/protofire/solhint)\n[![NPM version](https://badge.fury.io/js/solhint.svg)](https://npmjs.org/package/solhint)\n[![Coverage Status](https://coveralls.io/repos/github/protofire/solhint/badge.svg?branch=master)](\nhttps://coveralls.io/github/protofire/solhint?branch=master)\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/protofire/solhint/master/LICENSE)\n[![dependencies Status](https://david-dm.org/protofire/solhint/status.svg)](https://david-dm.org/protofire/solhint)\n[![devDependencies Status](https://david-dm.org/protofire/solhint/dev-status.svg)](https://david-dm.org/protofire/solhint?type=dev)\n\nThis is an open source project for linting [Solidity](http://solidity.readthedocs.io/en/develop/) code. This project\nprovides both **Security** and **Style Guide** validations.\n\n## Installation\n\nYou can install Solhint using **npm**:\n\n```sh\nnpm install -g solhint\n\n# verify that it was installed correctly\nsolhint -V\n```\n\n## Usage\n\nFor linting Solidity files you need to run Solhint with one or more [Globs](https://en.wikipedia.org/wiki/Glob_(programming)) as arguments. For example, to lint all files inside `contracts` directory, you can do:\n\n```sh\nsolhint \"contracts/**/*.sol\"\n```\n\nTo lint a single file:\n\n```sh\nsolhint contracts/MyToken.sol\n```\n\nSolhint command description:\n\n```text\nUsage: solhint [options] <file> [...other_files]\n\nLinter for Solidity programming language\n\n\nOptions:\n\n  -V, --version                              output the version number\n  -f, --formatter [name]                     report formatter name (stylish, table, tap, unix)\n  -w, --max-warnings [maxWarningsNumber]     number of warnings to trigger nonzero\n  -c, --config [file_name]                   file to use as your .solhint.json\n  -q, --quiet                                report errors only - default: false\n  --ignore-path [file_name]                  file to use as your .solhintignore\n  -h, --help                                 output usage information\n\n\n\nCommands:\n\n  stdin [options]         put source code to stdin of this utility\n  init-config             create sample solhint config in current folder\n```\n\n## Configuration\n\nYou can use a `.solhint.json` file to configure Solhint globally. This file has the following\nformat:\n\n```json\n  {\n    \"extends\": \"default\",\n    \"rules\": {\n      \"avoid-throw\": false,\n      \"avoid-suicide\": \"error\",\n      \"avoid-sha3\": \"warn\",\n      \"indent\": [\"warn\", 4]\n    }\n  }\n```\n\nTo ignore files / folders that do not require validation you may use `.solhintignore` file. It supports rules in\n`.gitignore` format.\n\n```git exclude\nnode_modules/\nadditiona-tests.sol\n```\n\n### Configure linter with comments\n\nYou can use comments in the source code to configure solhint in a given line or file.\n\nFor example, to disable all validations in the line following a comment:\n\n```javascript\n  // solhint-disable-next-line\n  uint[] a;\n```\n\nYou can disable a single rule on a given line. For example, to disable validation of fixed compiler\nversion in the next line:\n\n```text\n  // solhint-disable-next-line compiler-fixed, compiler-gt-0_4\n  pragma solidity ^0.4.4;\n```\n\nDisable validation on current line:\n\n```text\n  pragma solidity ^0.4.4; // solhint-disable-line\n```\n\nDisable validation of fixed compiler version validation on current line:\n\n```text\n  pragma solidity ^0.4.4; // solhint-disable-line compiler-fixed, compiler-gt-0_4\n```\n\nYou can disable a rule for a group of lines:\n\n```javascript\n  /* solhint-disable avoid-throw */\n  if (a > 1) {\n    throw;\n  }\n  /* solhint-enable avoid-throw */\n```\n\nOr disable all validations for a group of lines:\n\n```javascript\n  /* solhint-disable */\n  if (a > 1) {\n    throw;\n  }\n  /* solhint-enable */\n```\n\n## Rules\n### Security Rules\n[Full list with all supported Security Rules](https://github.com/protofire/solhint/blob/master/docs/rules.md#security-rules)\n### Style Guide Rules\n[Full list with all supported Style Guide Rules](https://github.com/protofire/solhint/blob/master/docs/rules.md#style-guide-rules)\n### Best Practices Rules\n[Full list with all supported Best Practices Rules](https://github.com/protofire/solhint/blob/master/docs/rules.md#best-practise-rules)\n### Prettier (experimental)\nIf you have [prettier-plugin-solidity](https://github.com/prettier-solidity/prettier-plugin-solidity) installed, you can use the `prettier/prettier` rule for reporting differences between your code and how prettier would format it. If you enable this rule, you should disable some of the style guides rules (mainly `quotes`, `indent` and `two-lines-top-level-separator`).\n\n## Documentation\n\nRelated documentation you may find [there](https://protofire.github.io/solhint/).\n\n## IDE Integrations\n\n  - **[Sublime Text 3](https://packagecontrol.io/search/solhint)**\n  - **[Atom](https://atom.io/packages/atom-solidity-linter)**\n  - **[Vim](https://github.com/sohkai/syntastic-local-solhint)**\n  - **[JetBrains IDEA, WebStorm, CLion, etc.](https://plugins.jetbrains.com/plugin/10177-solidity-solhint)**\n  - **[VS Code: Solidity by Juan Blanco](\n         https://marketplace.visualstudio.com/items?itemName=JuanBlanco.solidity)**\n  - **[VS Code: Solidity Language Support by CodeChain.io](\n         https://marketplace.visualstudio.com/items?itemName=kodebox.solidity-language-server)**\n\n## Table of Contents\n\n* [Roadmap](ROADMAP.md): The core project's roadmap - what the core team is looking to work on in the near future.\n* [Contributing](CONTRIBUTING.md): The core Solhint team :heart: contributions. This describes how you can contribute to the Solhint Project.\n\n## Acknowledgements\n\nThe grammar used by solhint was created and is maintained by [Federico Bond](https://github.com/federicobond).\nYou can find it [here](https://github.com/solidityj/solidity-antlr4).\n\n## Licence\n\nMIT\n\n## Back us\nSolhint is free to use and open-sourced. If you value our effort and feel like helping us to keep pushing this tool forward, you can send us a small donation. We'll highly appreciate it :)\n\n[![Donate with Ethereum](https://en.cryptobadges.io/badge/micro/0xe8cdf02efd8ab0a490d7b2cb13553389c9bc932e)](https://en.cryptobadges.io/donate/0xe8cdf02efd8ab0a490d7b2cb13553389c9bc932e)\n\n## Who uses Solhint?\n[<img src=\"https://avatars0.githubusercontent.com/u/20820676?s=200&v=4\" width=\"75px\" height=\"75px\" alt=\"OpenZeppelin\" title=\"OpenZeppelin\" style=\"margin: 20px 20px 0 0\" />](https://github.com/OpenZeppelin) \n[<img src=\"https://avatars2.githubusercontent.com/u/28943015?s=200&v=4\" width=\"75px\" height=\"75px\" alt=\"POA Network - Public EVM Sidechain\" title=\"POA Network - Public EVM Sidechain\" style=\"margin: 20px 20px 0 0\" />](https://github.com/poanetwork) [<img src=\"https://avatars3.githubusercontent.com/u/24832717?s=200&v=4\" width=\"75px\" height=\"75px\" alt=\"0x\" title=\"0x\" style=\"margin: 20px 20px 0 0\" />](https://github.com/0xProject) [<img src=\"https://avatars1.githubusercontent.com/u/24954468?s=200&v=4\" width=\"75px\" height=\"75px\" alt=\"GNOSIS\" title=\"GNOSIS\" style=\"margin: 20px 20px 0 0\"/>](https://github.com/gnosis)\n\n### Projects\n\n- OpenZeppelin:\n  - [openzeppelin-solidity](https://github.com/OpenZeppelin/openzeppelin-solidity)\n- POA Network - Public EVM Sidechain:\n  - [Proof of Physical Address (PoPA)](https://github.com/poanetwork/poa-popa)\n  - [Proof of Bank Account (PoBA)](https://github.com/poanetwork/poa-poba)\n- [0x](https://github.com/0xProject/0x-monorepo/tree/development/packages/contracts)\n- Gnosis:\n  - [Gnosis Prediction Market Contracts](https://github.com/gnosis/pm-contracts)\n  - [The DutchX decentralized trading protocol](https://github.com/gnosis/dex-contracts)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/protofire/solhint.git"
  },
  "scripts": {
    "exec-tests": "nyc -x \"**/grammar/**\" mocha && nyc report --reporter=text-lcov | coveralls",
    "generate": "scripts/build-grammar.sh",
    "lint": "eslint .",
    "test": "npm run exec-tests",
    "test-only": "mocha"
  },
  "version": "1.5.1"
}
