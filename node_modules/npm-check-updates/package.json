{
  "_from": "npm-check-updates@3.2.2",
  "_id": "npm-check-updates@3.2.2",
  "_inBundle": false,
  "_integrity": "sha512-smZLGQWYbNOQVL787LwxTKakhTll/GZ4EwlKRfskD+eTCSpxdwpbkUHbT0QxyCf1uZw86TXeAFGw8ETzmW3Fqw==",
  "_location": "/npm-check-updates",
  "_phantomChildren": {
    "locate-path": "5.0.0"
  },
  "_requested": {
    "escapedName": "npm-check-updates",
    "fetchSpec": "3.2.2",
    "name": "npm-check-updates",
    "raw": "npm-check-updates@3.2.2",
    "rawSpec": "3.2.2",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/npm-check-updates/-/npm-check-updates-3.2.2.tgz",
  "_shasum": "20719e4627f8f6ab87274adfdb30fda22027bde1",
  "_shrinkwrap": null,
  "_spec": "npm-check-updates@3.2.2",
  "_where": "C:\\Users\\Rahma John\\Documents\\dev\\CraftingChain-",
  "author": {
    "email": "tomas1@gmail.com",
    "name": "Tomas Junnonen"
  },
  "bin": {
    "ncu": "./bin/ncu",
    "npm-check-updates": "./bin/npm-check-updates"
  },
  "bugs": {
    "url": "https://github.com/tjunnone/npm-check-updates/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Raine Revere",
      "url": "https://github.com/raineorshine"
    }
  ],
  "dependencies": {
    "chalk": "^2.4.2",
    "cint": "^8.2.1",
    "cli-table": "^0.3.1",
    "commander": "^3.0.2",
    "fast-diff": "^1.2.0",
    "find-up": "4.1.0",
    "get-stdin": "^7.0.0",
    "json-parse-helpfulerror": "^1.0.3",
    "libnpmconfig": "^1.2.1",
    "lodash": "^4.17.15",
    "node-alias": "^1.0.4",
    "pacote": "^9.5.8",
    "progress": "^2.0.3",
    "prompts": "^2.2.1",
    "rc-config-loader": "^2.0.4",
    "requireg": "^0.2.2",
    "semver": "^6.3.0",
    "semver-utils": "^1.1.4",
    "spawn-please": "^0.3.0",
    "update-notifier": "^3.0.1"
  },
  "deprecated": false,
  "description": "Find newer versions of dependencies than what your package.json or bower.json allows",
  "devDependencies": {
    "chai": "^4.2.0",
    "chai-as-promised": "^7.1.1",
    "chai-string": "^1.5.0",
    "chokidar-cli": "^2.1.0",
    "eslint": "^6.6.0",
    "mocha": "^6.2.2",
    "should": "^13.2.3",
    "snyk": "^1.239.5",
    "tmp": "0.1.0"
  },
  "engines": {
    "node": ">=8"
  },
  "files": [
    "bin",
    "lib"
  ],
  "homepage": "https://github.com/tjunnone/npm-check-updates",
  "keywords": [
    "bower",
    "bower.json",
    "check",
    "dependencies",
    "discover",
    "find",
    "management",
    "ncu",
    "npm",
    "package.json",
    "updater",
    "updates",
    "upgrades",
    "version"
  ],
  "license": "Apache-2.0",
  "main": "./lib/npm-check-updates",
  "name": "npm-check-updates",
  "optionalDependencies": {},
  "preferGlobal": true,
  "readme": "[![npm](https://badge.fury.io/js/npm-check-updates.svg)](http://badge.fury.io/js/npm-check-updates)\n[![Build Status](https://travis-ci.org/tjunnone/npm-check-updates.svg?branch=master)](https://travis-ci.org/tjunnone/npm-check-updates)\n\n> v3 released! See the [release notes](https://github.com/tjunnone/npm-check-updates/releases/tag/v3.0.0) for a description of breaking changes.\n\n**npm-check-updates upgrades your package.json dependencies to the *latest* versions, ignoring specified versions.**\n\nnpm-check-updates maintains your existing semantic versioning *policies*, i.e., it will upgrade `\"express\": \"^4.0.0\"` to `\"express\": \"^5.0.0\"`.\n\nnpm-check-updates *only* modifies your package.json file. Run `npm install` to update your installed packages and package-lock.json.\n\n![npm-check-updates-screenshot](https://github.com/tjunnone/npm-check-updates/blob/master/.github/screenshot.png?raw=true)\n\n- Red = major upgrade (and all [major version zero](https://semver.org/#spec-item-4))\n- Cyan = minor upgrade\n- Green = patch upgrade\n\nYou may also want to consider [npm-check](https://github.com/dylang/npm-check). Similar purpose, different features.\n\nInstallation\n--------------\n\n```sh\nnpm install -g npm-check-updates\n```\n\nUsage\n--------------\nShow any new dependencies for the project in the current directory:\n\n```sh\n$ ncu\nChecking package.json\n[====================] 5/5 100%\n\n express           4.12.x  →   4.13.x\n multer            ^0.1.8  →   ^1.0.1\n react-bootstrap  ^0.22.6  →  ^0.24.0\n react-a11y        ^0.1.1  →   ^0.2.6\n webpack          ~1.9.10  →  ~1.10.5\n\nRun ncu -u to upgrade package.json\n```\n\nUpgrade a project's package file:\n\n> **Make sure your package file is in version control and all changes have been committed. This *will* overwrite your package file.**\n\n```sh\n$ ncu -u\nUpgrading package.json\n[====================] 1/1 100%\n\n express           4.12.x  →   4.13.x\n\nRun npm install to install new versions.\n\n$ npm install      # update installed packages and package-lock.json\n```\n\nCheck global packages:\n\n```sh\n$ ncu -g           # add -u to get a one-line command for upgrading\n```\n\nYou can include or exclude specific packages using the `--filter` and `--reject` options. They accept strings, comma-or-space-delimited lists, or regular expressions:\n\n```sh\n# match mocha and should packages exactly\n$ ncu mocha             # shorthand for ncu -f mocha (or --filter)\n$ ncu one, two, three\n\n# exclude packages\n$ ncu -x nodemon        # shorthand for ncu --reject nodemon\n\n# match packages that start with \"gulp-\" using regex\n$ ncu \"/^gulp-.*$/\"\n\n# match packages that do not start with \"gulp-\".\n$ ncu '/^(?!gulp-).*$/' # mac/linux\n$ ncu \"/^(?!gulp-).*$/\" # windows\n```\n\nOptions\n--------------\n\n    --configFilePath         rc config file path (default: directory of `packageFile` or ./ otherwise)\n    --configFileName         rc config file name (default: .ncurc.{json,yml,js})                             \n    --cwd                    Used as current working directory for `spawn` in npm listing\n    --dep                    check only a specific section(s) of dependencies:\n                             prod|dev|peer|optional|bundle (comma-delimited)\n    --engines-node           include only packages that satisfy engines.node as\n                             specified in the package file\n    -e, --error-level        set the error-level. 1: exits with error code 0 if no\n                             errors occur. 2: exits with error code 0 if no\n                             packages need updating (useful for continuous\n                             integration)\n    -f, --filter             include only package names matching the given string,\n                             comma-or-space-delimited list, or /regex/\n    -g, --global             check global packages instead of in the current project\n    -i, --interactive        Enable interactive prompts for each dependency;\n                             Implies -u unless one of the json options are set\n    -j, --jsonAll            output new package file instead of human-readable\n                             message\n    --jsonDeps               Will return output like `jsonAll` but only lists\n                             `dependencies`, `devDependencies`, and\n                             `optionalDependencies` of the new package data.\n    --jsonUpgraded           output upgraded dependencies in json\n    -l, --loglevel           what level of logs to report: silent, error, warn,\n                             info, verbose, silly (default: warn)\n    -m, --minimal            do not upgrade to newer versions that are already\n                             satisfied by the existing version range (v2 behavior).\n    -n, --newest             find the newest published versions available instead\n                             of the latest stable versions\n    -p, --packageManager     npm or bower (default: npm)\n    --packageData            include stringified package file (use stdin instead)\n    --packageFile            package file location (default: ./package.json)\n    --pre                    include -alpha, -beta, -rc. Default: 0. Default\n                             with --newest and --greatest: 1.\n    --prefix                 Used as current working directory in bower and npm\n    -r, --registry           specify third-party NPM registry\n    --removeRange            remove version ranges from the final package version\n    -s, --silent             don't output anything (--loglevel silent)\n    --semverLevel            find the highest version within \"major\" or \"minor\"\n    -t, --greatest           find the highest versions available instead of the\n                             latest stable versions\n    --timeout                a global timeout in ms\n    -u, --upgrade            overwrite package file\n    -v, --version            get version\n    -V                       get version\n    -x, --reject             exclude packages matching the given string, comma-\n                             delimited list, or regex\n\nHow dependency updates are determined\n--------------\n\n- Direct dependencies will be increased to the latest stable version:\n  - `2.0.1` → `2.2.0`\n  - `1.2` → `1.3`\n  - `0.1.0` → `1.0.1`\n  - with `--semverLevel major`\n    - `0.1.0` → `0.2.1`\n  - with `--semverLevel minor`\n    - `0.1.0` → `0.1.2`\n-  Semantic versioning policies for levels are maintained while satisfying the latest version:\n  - `^1.2.0` → `^2.0.0`\n  - `1.x` → `2.x`\n- \"Any version\" is maintained:\n  - `*` → `*`\n- \"Greater than\" is maintained:\n  - `>0.2.0` → `>0.3.0`\n- Closed ranges are replaced with a wildcard:\n  - `1.0.0 < 2.0.0` → `^3.0.0`\n\nConfiguration Files\n--------------\nUse a `.ncurc.{json,yml,js}` file to specify configuration information.\nYou can specify file name and path using `--configFileName` and `--configFilePath`\ncommand line options.\n\nFor example, `.ncurc.json`:\n\n```json\n{\n  \"upgrade\": true,\n  \"filter\": \"express\",\n  \"reject\": [\n    \"@types/estree\",\n    \"ts-node\"\n  ]\n}\n```\n\nModule Use\n--------------\nnpm-check-updates can be required:\n\n```js\nconst ncu = require('npm-check-updates');\n\nncu.run({\n    // Any command-line option can be specified here.\n    // These are set by default:\n    jsonUpgraded: true,\n    packageManager: 'npm',\n    silent: true\n}).then((upgraded) => {\n    console.log('dependencies to upgrade:', upgraded);\n});\n```\n\nKnown Issues\n--------------\n\n- Windows: If npm-check-updates hangs, run `ncu --loglevel verbose` to see if it is waiting for stdin. If so, try setting the package file explicitly: `ncu -g --packageFile package.json`. See [#136](https://github.com/tjunnone/npm-check-updates/issues/136#issuecomment-155721102).\n\nAlso search the [issues page](https://github.com/tjunnone/npm-check-updates/issues).\n\n\nProblems?\n--------------\n\nPlease [file an issue](https://github.com/tjunnone/npm-check-updates/issues)! But always [search existing issues](https://github.com/tjunnone/npm-check-updates/issues?utf8=%E2%9C%93&q=is%3Aissue) first!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tjunnone/npm-check-updates.git"
  },
  "scripts": {
    "lint": "eslint bin/* lib test",
    "test": "npm run lint && mocha && mocha test/individual && if [ ! \"$TRAVIS\" ]; then snyk test; fi",
    "watch": "chokidar \"lib/**/*.js\" -c \"npm run test\""
  },
  "version": "3.2.2"
}
